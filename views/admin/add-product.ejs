<%- include('admin-partials/header.ejs') %>
    <style>
        .text-red {
            color: red;
        }
        
        #showimage, #imagePreviews img {
            max-height: 300px;
            width: auto;
            display: block;
            object-fit: cover;
            margin: 10px 0;
        }
    
        #imagePreviews {
            max-height: 300px;
            overflow-y: auto;
        }
    
        .modal-body label {
            text-align: left;
            display: block;
            width: 100%;
        }
    
        .modal-body .form-group {
            text-align: left;
        }

        .image-container {
            position: relative;
            margin-bottom: 10px;
            overflow: hidden;
            width: 100%;
            max-width: 500px;
        }

        .preview-image {
            width: 100%;
            display: block;
        }

    </style>
    <div class="screen-overlay"></div>
    <aside class="navbar-aside" id="offcanvas_aside">
        <div class="aside-top">
            <a href="index.html" class="brand-wrap">
                <img src="/assets/imgs/theme/techoasis_logo.png" class="logo" alt="inloop Dashboard">
            </a>
            <div>
                <button class="btn btn-icon btn-aside-minimize"> <i class="text-muted material-icons md-menu_open"></i>
                </button>
            </div>
        </div>
        <nav>
            <ul class="menu-aside">
                <li class="menu-item ">
                    <a class="menu-link" href="/admin"> <i class="icon material-icons md-home"></i>
                        <span class="text">Dashboard</span>
                    </a>
                </li>
                <li class="menu-item ">
                    <a class="menu-link" href="/admin/usermanagement"> <i class="icon material-icons md-person"></i>
                        <span class="text">User Management</span>
                    </a>
                </li>
                <li class="menu-item active">
                    <a class="menu-link" href="/admin/product-management"> <i
                            class="icon material-icons md-shopping_bag"></i>
                        <span class="text">Product Management</span>
                    </a>
                </li>
    
                <li class="menu-item">
                    <a class="menu-link" href="/admin/category-management"> <i class="icon material-icons md-category "></i>
    
                        <span class="text">Category Management</span>
                    </a>
                </li>
                <li class="menu-item ">
                    <a class="menu-link" href="/admin/order-management"> <i
                            class="icon material-icons md-shopping_cart"></i>
                        <span class="text">Order Management</span>
                    </a>
                </li>
    
                <li class="menu-item">
                    <a class="menu-link" href="/admin/coupon-management"> <i
                            class="icon material-icons md-redeem coupon-icon"></i>
                        <span class="text">Coupon Management</span>
                    </a>
                </li>
                
            </ul>
            
            <br>
            <br>
        </nav>
    </aside>
    <main class="main-wrap">
        <header class="main-header navbar">
            <div class="col-search">
                <form method="get" class="searchform" action="/admin/product-search">
                    <div class="input-group">
                        <input list="search_terms" name="search" type="text" class="form-control" placeholder="Search term">
                        <button class="btn btn-light bg" type="submit"> <i class="material-icons md-search"></i></button>
                    </div>
                </form>
            </div>
            <div class="col-nav ms-auto">
                <button class="btn btn-icon btn-mobile me-auto" data-trigger="#offcanvas_aside"> <i
                        class="material-icons md-apps"></i> </button>
                <ul class="nav">
                    <li class="dropdown nav-item">
                        <a class="dropdown-item text-danger" href="/admin/logout"><i
                                class="material-icons md-exit_to_app"></i>Logout</a>
                    </li>
                </ul>
            </div>
        </header>
        <section class="content-main">
            <div class="row">
                <div class="col-8">
                    <div class="content-header">
                        <h2 class="content-title">Add New Product</h2>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-2"></div>
                <div class="col-lg-8">
                    <div class="card mb-4">
                        <div class="card-body">
                            <div class="row">
                                <form id="addNewProduct" enctype="multipart/form-data">
                                    <div class="form-group mb-3">
                                        <label for="productName">Product Name</label> <br>
                                        <span id="productNameError" class="text-red"></span>
                                        <input type="text" class="form-control" id="productName" name="productName">
                                    </div>
                                    <div class="form-group mb-3">
                                        <label for="productDescription">Description</label> <br>
                                        <span id="descriptionError" class="text-red"></span>
                                        <textarea class="form-control" id="productDescription" name="description"></textarea>
                                    </div>
                                    <div class="form-group mb-3">
                                        <label for="productBrand">Brand</label> <br>
                                        <span id="brandError" class="text-red"></span>
                                        <input type="text" class="form-control" id="productBrand" name="brand">
                                    </div>
                                    <div class="form-group mb-3">
                                        <label for="productCountInStock">Count in Stock</label> <br>
                                        <span id="stockError" class="text-red"></span>
                                        <input type="number" class="form-control" id="productCountInStock" name="countInStock">
                                    </div>
                                    <div class="form-group mb-3">
                                        <label for="productCategory">Category</label> <br>
                                        <span id="categoryError" class="text-red"></span>
                                        <select class="form-control" id="productCategory" name="category">
                                            <option value="">Select a category</option>
                                            <% categories.forEach(category => { %>
                                                <option value="<%= category._id %>"><%= category.name %></option>
                                            <% }) %>
                                        </select>
                                    </div>
                                    <div class="form-group mb-3">
                                        <label for="productPrice">Original Price</label> <br>
                                        <span id="priceError" class="text-red"></span>
                                        <input type="number" class="form-control" id="productPrice" name="price">
                                    </div>
                                    <div class="form-group mb-3">
                                        <label for="images">Additional Images (Upload multiple files)</label> <br>
                                        <span id="imagesError" class="text-red" ></span>
                                        <input type="file" class="form-control-file" id="images" name="images" accept="image/*" multiple>
                                        <div id="imagePreviews"></div>
                                    </div>
                                    <button type="submit" class="btn btn-primary" id="addProductBtn">Add Product</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Cropping Modal -->
            <div class="modal fade" id="cropModal" tabindex="-1" role="dialog" aria-labelledby="cropModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div id="cropperContainer">
                                <img id="cropperImage" src="" alt="Image to crop">
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-primary" id="cropButton">Apply Crop</button>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <footer class="main-footer font-xs">
            <div class="row pb-30 pt-15">
                <div class="col-sm-6">
                    <script>
                    document.write(new Date().getFullYear())
                    </script> © <a href="/">Techoasis</a>
                </div>
                <div class="col-sm-6">
                    <div class="text-sm-end">
                        All rights reserved
                    </div>
                </div>
            </div>
        </footer>
    </main>


    <script src="/assets/js/vendors/jquery-3.6.0.min.js"></script>
    <script src="/assets/js/vendors/bootstrap.bundle.min.js"></script>
    <script src="/assets/js/vendors/select2.min.js"></script>
    <script src="/assets/js/vendors/perfect-scrollbar.js"></script>
    <script src="/assets/js/vendors/jquery.fullscreen.min.js"></script>
    <!-- Main Script -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="/assets/js/main.js" type="text/javascript"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('addNewProduct');
            const submitBtn = document.getElementById('addProductBtn');
        
            const productName = document.getElementById('productName');
            const productDescription = document.getElementById('productDescription');
            const images = document.getElementById('images');
            const productBrand = document.getElementById('productBrand');
            const productCountInStock = document.getElementById('productCountInStock');
            const productCategory = document.getElementById('productCategory');
            const productPrice = document.getElementById('productPrice');
        
            const productNameError = document.getElementById('productNameError');
            const descriptionError = document.getElementById('descriptionError');
            const imagesError = document.getElementById('imagesError');
            const brandError = document.getElementById('brandError');
            const stockError = document.getElementById('stockError');
            const categoryError = document.getElementById('categoryError');
            const priceError = document.getElementById('priceError');
        
            const imagePreviews = document.getElementById('imagePreviews');
            const cropperImage = document.getElementById('cropperImage');
            const cropButton = document.getElementById('cropButton');
            const cropModal = new bootstrap.Modal(document.getElementById('cropModal'), {
                backdrop: 'static',
                keyboard: false
            });
        
            let cropper;
            let files = [];
            let croppedFiles = [];
            let currentFileIndex = 0;
        
            // Add touched class on focus
            form.addEventListener('focus', function(event) {
                event.target.classList.add('touched');
            }, true);
        
            // Validate on input change if field is touched
            form.addEventListener('input', function(event) {
                if (event.target.classList.contains('touched')) {
                    validateField(event.target);
                }
            });
        
            form.addEventListener('submit', function(event) {
                event.preventDefault();
                if (isFormValid()) {
                    handleFormSubmit();
                }
            });
        
            images.addEventListener('change', function(e) {
                files = Array.from(this.files);
                imagePreviews.innerHTML = '';
                croppedFiles = [];
                currentFileIndex = 0;
                if (files.length > 0) {
                    processCurrentImage();
                }
            });
        
            document.getElementById('cropModal').addEventListener('shown.bs.modal', function () {
                if (cropper) {
                    cropper.destroy();
                }
                cropper = new Cropper(cropperImage, {
                    aspectRatio: 1,
                    viewMode: 1,
                });
            });
        
            cropButton.addEventListener('click', function() {
                if (cropper) {
                    cropper.getCroppedCanvas().toBlob((blob) => {
                        const fileName = files[currentFileIndex].name;
                        const croppedFile = new File([blob], fileName, { type: 'image/jpeg' });
                        croppedFiles.push(croppedFile);
                        addImageToPreview(URL.createObjectURL(croppedFile));
                        moveToNextImage();
                    }, 'image/jpeg');
                }
            });
        
            // skipButton.addEventListener('click', function() {
            //     croppedFiles.push(files[currentFileIndex]);
            //     addImageToPreview(URL.createObjectURL(files[currentFileIndex]));
            //     moveToNextImage();
            // });
        
            function validateField(field) {
                switch (field.id) {
                    case 'productName':
                        validateProductName();
                        break;
                    case 'productDescription':
                        validateDescription();
                        break;
                    case 'images':
                        validateAdditionalImages();
                        break;
                    case 'productBrand':
                        validateBrand();
                        break;
                    case 'productCountInStock':
                        validateStock();
                        break;
                    case 'productCategory':
                        validateCategory();
                        break;
                    case 'productPrice':
                        validatePrice();
                        break;
                    case 'productDiscountPrice':
                        validateDiscountPrice();
                        break;
                }
            }
        
            function validateProductName() {
                const value = productName.value.trim();
                if (value === "") {
                    productNameError.textContent = "Product Name is required";
                    productName.style.borderColor = 'red';
                    return false;
                }
                productNameError.textContent = "";
                productName.style.borderColor = 'green';
                return true;
            }
        
            function validateDescription() {
                const value = productDescription.value.trim();
                if (value === "") {
                    descriptionError.textContent = "Description is required";
                    productDescription.style.borderColor = 'red';
                    return false;
                }
                descriptionError.textContent = "";
                productDescription.style.borderColor = 'green';
                return true;
            }
        
            function validateAdditionalImages() {
                try {
                    const files = images.files;
                    if (files.length === 0) {
                        imagesError.textContent = "Please upload at least one additional image";
                        images.style.borderColor = 'red';
                        return false;
                    }
                    
                    if (files.length > 5) {
                        imagesError.textContent = "Maximum 5 Additional Images allowed";
                        images.style.borderColor = 'red';
                        return false;
                    }
                    
                    const allowedTypes = ["image/jpeg", "image/jpg", "image/png", "image/gif"];
                    
                    for (let i = 0; i < files.length; i++) {
                        const file = files[i];
                        
                        if (!allowedTypes.includes(file.type)) {
                            imagesError.textContent = "All Additional Images must be in JPEG, PNG, or GIF format";
                            images.style.borderColor = 'red';
                            return false;
                        }
                    }
                    imagesError.textContent = "";
                    images.style.borderColor = 'green';
                    return true;
                }
                catch (error) {
                    imagesError.textContent = "An error occurred while validating additional images";
                    images.style.borderColor = 'red';
                    return false;
                }
            } 
        
            function validateBrand() {
                const value = productBrand.value.trim();
                if (value === "") {
                    brandError.textContent = "Brand name is required";
                    productBrand.style.borderColor = 'red';
                    return false;
                }
                brandError.textContent = "";
                productBrand.style.borderColor = 'green';
                return true;
            }
        
            function validateStock() {
                const value = productCountInStock.value.trim();
                const count = parseInt(value);
                if (value === "" || isNaN(count) || count < 0 || count > 300) {
                    stockError.textContent = "Please enter a valid Count in Stock (0-300)";
                    productCountInStock.style.borderColor = 'red';
                    return false;
                }
                stockError.textContent = "";
                productCountInStock.style.borderColor = 'green';
                return true;
            }
        
            function validateCategory() {
                const value = productCategory.value;
                if (value === '') {
                    categoryError.textContent = "Select Valid Category";
                    productCategory.style.borderColor = 'red';
                    return false;
                }
                categoryError.textContent = "";
                productCategory.style.borderColor = 'green';
                return true;
            }
        
            function validatePrice() {
                const value = productPrice.value.trim();
                const price = parseFloat(value);
                if (value === "" || isNaN(price) || price <= 0) {
                    priceError.textContent = "Please enter a valid Original Price greater than 0";
                    productPrice.style.borderColor = 'red';
                    return false;
                }
                priceError.textContent = "";
                productPrice.style.borderColor = 'green';
                return true;
            }
        
            function validateDiscountPrice() {
                const value = productDiscountPrice.value.trim();
                const discount = parseFloat(value);
                if (value === "" || isNaN(discount) || discount < 0 || discount > 90) {
                    discountPriceError.textContent = "Please enter a valid Discount Price (0-90)";
                    productDiscountPrice.style.borderColor = 'red';
                    return false;
                }
                discountPriceError.textContent = "";
                productDiscountPrice.style.borderColor = 'green';
                return true;
            }
        
            function isFormValid() {
                return validateProductName() &&
                    validateDescription() &&
                    validateBrand() &&
                    validateStock() &&
                    validateCategory() &&
                    validatePrice() &&
                    validateAdditionalImages()
                    // validateDiscountPrice();
            }
        
            function processCurrentImage() {
                if (currentFileIndex < files.length) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        cropperImage.src = e.target.result;
                        cropModal.show();
                    }
                    reader.readAsDataURL(files[currentFileIndex]);
                }
            }
        
            function addImageToPreview(imgSrc) {
                const img = document.createElement('img');
                img.src = imgSrc;
                img.style.maxWidth = '200px';
                img.style.marginRight = '10px';
                img.style.marginBottom = '10px';
                imagePreviews.appendChild(img);
            }
        
            function moveToNextImage() {
                currentFileIndex++;
                if (currentFileIndex < files.length) {
                    cropModal.hide();
                    setTimeout(() => {
                        processCurrentImage();
                    }, 500);
                } else {
                    cropModal.hide();
                }
            }
        
            async function uploadProductImages() {
                const formData = new FormData();
                
                for (let i = 0; i < croppedFiles.length; i++) {
                    formData.append('images', croppedFiles[i]);
                }
        
                try {
                    const response = await fetch('/upload-product-images', {
                        method: 'POST',
                        body: formData
                    });
        
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
        
                    const data = await response.json();
                    
                    if (data.success) {
                        return data.imagePaths;
                    } else {
                        throw new Error(data.message || 'Error uploading images');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    throw error;
                }
            }
        
            async function handleFormSubmit() {
                try {
                    const imagePaths = await uploadProductImages();
        
                    const productData = {
                        productName: document.getElementById('productName').value,
                        description: document.getElementById('productDescription').value,
                        brand: document.getElementById('productBrand').value,
                        countInStock: parseInt(document.getElementById('productCountInStock').value),
                        category: document.getElementById('productCategory').value,
                        price: parseFloat(document.getElementById('productPrice').value),
                        images: imagePaths
                    };
        
                    const response = await fetch("/admin/product-management/newProduct", {
                        method: "POST",
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(productData)
                    });
        
                    const result = await response.json();
        
                    if (result.success) {
                        alert("Product Added successfully");
                        window.location.href = result.redirectUrl;
                    } else {
                        alert("Error updating product: " + result.errorMessage);
                    }
                } catch (error) {
                    alert("An error occurred while updating the product.");
                }
            }
        });
    </script>

</body>


<!-- Mirrored from wp.alithemes.com/html/evara/evara-backend/page-form-product-2.html by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 01 Aug 2021 15:33:32 GMT -->
</html>