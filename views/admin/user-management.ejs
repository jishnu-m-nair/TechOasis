<%- include('admin-partials/header.ejs') %>
    <style>
        .search-bar {
            flex-grow: 1;
        }
    </style>

    <div class="screen-overlay"></div>

    <%- include('admin-partials/sidebar.ejs') %>

        <main class="main-wrap">
            <header class="main-header navbar">
                <div class="col-nav ms-auto">
                    <button class="btn btn-icon btn-mobile me-auto" data-trigger="#offcanvas_aside">
                        <i class="material-icons md-apps"></i>
                    </button>
                    <ul class="nav">
                        <li class="nav-item">
                            <a class="nav-link btn-icon darkmode" href="#">
                                <i class="material-icons md-nights_stay"></i>
                            </a>
                        </li>
                        <li class="dropdown nav-item">
                            <a class="dropdown-item text-danger" href="/admin/logout"><i
                                    class="material-icons md-exit_to_app"></i>Logout</a>
                        </li>
                    </ul>
                </div>
            </header>
            <section class="content-main">
                <div class="content-header">
                    <div>
                        <h2 class="content-title card-title">User Management</h2>
                    </div>
                </div>
                <div class="card mb-4">

                    <div class="container mt-5">
                        <div class="d-flex align-items-center mb-4">
                            <div class="search-bar me-2">
                                <input type="text" id="searchUser" class="form-control" placeholder="Search User">
                            </div>
                            <div class="d-flex align-items-center">
                                <label for="filter" class="me-2 mb-0">Filter by:</label>
                                <form id="userFilterForm">
                                    <select id="filter" name="filter" class="form-select">
                                        <option value="all">All</option>
                                        <option value="false" selected>Active</option>
                                        <option value="true">Blocked</option>
                                    </select>
                                </form>
                            </div>
                        </div>
                    </div>

                    <div class="container rounded py-3">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="border rounded">
                                    <tr class="text-center">
                                        <th>ID</th>
                                        <th>Name</th>
                                        <th>Email</th>
                                        <th>Mobile Number</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody class="border rounded" id="userContainer">
                                    <!-- inside script -->
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- pagination -->
                    <div class="pagination-area mt-15 mb-sm-5 mb-lg-0">
                        <!-- inside script -->
                    </div>
                </div>
            </section>

            <%- include('admin-partials/footer.ejs') %>

        </main>

        <%- include('admin-partials/scripts.ejs') %>

            <script>
                async function blockUser(id) {
                    let response = await fetch("/api/block-user", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({
                            id,
                        }),
                    });
                    if (response.ok) {
                        let responseData = await response.json();

                        if (responseData.userStatus === "active") {
                            await Swal.fire({
                                icon: 'success',
                                title: 'User Unblocked',
                                text: responseData.message || 'The user has been successfully unblocked.',
                                timer: 2500,
                                showConfirmButton: false,
                            });
                            fetchUsers();

                        } else if (responseData.userStatus === "block") {
                            await Swal.fire({
                                icon: 'success',
                                title: 'User Blocked',
                                text: responseData.message || 'The user has been successfully blocked.',
                                timer: 2500,
                                showConfirmButton: false,
                            });
                            fetchUsers();
                        }
                    } else if (response.status === 400) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Session Expired',
                            text: 'Your session has expired. Please log in again.',
                            timer: 2500,
                            showConfirmButton: false,
                        }).then(() => {
                            window.location.reload();
                        });
                    }
                }

                function confirmBlock(id) {
                    var confirmationMessage =
                        document.getElementById("blockButton_" + id).innerHTML.trim() ===
                            "Block"
                            ? "Are you sure you want to block this user?"
                            : "Are you sure you want to unblock this user?";
                    Swal.fire({
                        title: confirmationMessage,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No',
                    }).then((result) => {
                        if (result.isConfirmed) {
                            blockUser(id);
                        }
                    });
                }

                const filterForm = document.getElementById('userFilterForm');
                const searchUserInput = document.getElementById('searchUser');

                async function fetchUsers(page = 1) {
                    const filter = document.getElementById('filter').value;
                    const searchQuery = searchUserInput ? searchUserInput.value.trim() : '';

                    try {
                        const response = await fetch(`/api/user-filter`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ filter, search: searchQuery, page })
                        });

                        if (response.ok) {
                            const result = await response.json();
                            const users = result.users;
                            const totalPages = result.totalPages;
                            const currentPage = result.currentPage;
                            const userContainer = document.getElementById('userContainer');
                            userContainer.innerHTML = '';

                            if (users.length > 0) {
                                users.forEach((user, index) => {
                                    const userRow = document.createElement('tr');
                                    userRow.className = 'text-center';
                                    userRow.innerHTML = `
                            <td>${(currentPage - 1) * result.perPage + index + 1}</td>
                            <td>${user.fullname}</td>
                            <td>${user.email}</td>
                            <td>${user.phone ? user.phone : 'N/A'}</td>
                            <td>
                                <button onclick="confirmBlock('${user._id}')"
                                    id="blockButton_${user._id}"
                                    class="btn ${user.isBlocked ? 'btn-success' : 'btn-danger'}"
                                    style="width: 100px">
                                    ${user.isBlocked ? 'Unblock' : 'Block'}
                                </button>
                            </td>
                        `;
                                    userContainer.appendChild(userRow);
                                });

                                renderPagination(currentPage, totalPages);
                            } else {
                                userContainer.innerHTML = '<tr><td colspan="5" class="text-center">No users found.</td></tr>';
                                document.querySelector('.pagination-area').innerHTML = '';
                            }
                        } else {
                            document.getElementById('userContainer').innerHTML = '<tr><td colspan="5" class="text-center">An error occurred while fetching users.</td></tr>';
                        }
                    } catch (error) {
                        document.getElementById('userContainer').innerHTML = '<tr><td colspan="5" class="text-center">An error occurred while fetching users.</td></tr>';
                    }
                }

                function renderPagination(currentPage, totalPages) {
                    const paginationArea = document.querySelector('.pagination-area');
                    paginationArea.innerHTML = '';

                    if (totalPages > 1) {
                        const paginationList = document.createElement('ul');
                        paginationList.className = 'pagination justify-content-start';

                        if (currentPage > 1) {
                            const prevItem = document.createElement('li');
                            prevItem.className = 'page-item';
                            prevItem.innerHTML = `<a class="page-link" href="#" onclick="event.preventDefault(); fetchUsers(${currentPage - 1})"><i class="material-icons md-chevron_left"></i></a>`;
                            paginationList.appendChild(prevItem);
                        }

                        for (let i = Math.max(1, currentPage - 2); i <= Math.min(currentPage + 2, totalPages); i++) {
                            const pageItem = document.createElement('li');
                            pageItem.className = `page-item ${currentPage === i ? 'active' : ''}`;
                            pageItem.innerHTML = `<a class="page-link" href="#" onclick="event.preventDefault(); fetchUsers(${i})">${i}</a>`;
                            paginationList.appendChild(pageItem);
                        }

                        if (currentPage < totalPages) {
                            const nextItem = document.createElement('li');
                            nextItem.className = 'page-item';
                            nextItem.innerHTML = `<a class="page-link" href="#" onclick="event.preventDefault(); fetchUsers(${currentPage + 1})"><i class="material-icons md-chevron_right"></i></a>`;
                            paginationList.appendChild(nextItem);
                        }

                        paginationArea.appendChild(paginationList);
                    }
                }

                filterForm.addEventListener('change', () => fetchUsers());
                searchUserInput.addEventListener('input', () => fetchUsers());

                fetchUsers();

            </script>

            </body>

            </html>