<!-- Start Header Area -->
<%- include('user-partials/header.ejs') %>
<!-- End Header Area -->

<style>
  .dashboard-container {
    max-width: 500px;
    margin: auto;
    padding: 20px;
    background: white;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  }

  .dashboard-header {
    text-align: center;
    margin-bottom: 20px;
  }

  .dashboard-header h1 {
    margin: 0;
    font-size: 24px;
    color: #333;
  }

  .user-info {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }

  .d-flex {
    display: flex;
  }

  .d-flex span {
    font-weight: bold;
    padding-right: 15px;
    color: #555;
  }

  .d-flex p {
    margin: 0;
    color: #333;
  }

  .view i {
    margin-right: 5px;
  }

  .no-userinfo {
    padding: 20px;
    text-align: center;
    color: #ff0000;
    background-color: #fff3f3;
    border: 1px solid #ff0000;
    border-radius: 8px;
    margin-top: 20px;
  }

  address {
    font-style: normal;
    line-height: 1.5;
  }

  .address-container {
    margin: 20px;
    padding: 20px;
    border: 1px solid #ccc;
    border-radius: 5px;
  }

  .address-title {
    font-weight: bold;
    margin-top: 10px;
  }

  .address-list {
    list-style-type: none;
    padding: 0;
  }

  .address-item {
    margin-bottom: 15px;
    padding-bottom: 15px;
    border-bottom: 1px solid #ddd;
  }

  .address-item:last-child {
    border-bottom: none;
  }

  .new-address-button {
    display: inline-block;
    padding: 10px 20px;
    font-size: 16px;
    color: #fff;
    background-color: #007bff;
    border: none;
    border-radius: 5px;
    text-align: center;
    text-decoration: none;
    transition: background-color 0.3s ease;
  }

  .new-address-button:hover {
    background-color: #0056b3;
  }

  .new-address-button:active {
    background-color: #00408d;
  }

  .btn-seperator {
    margin: 0 20px;
    padding: 0 5px;
  }

  .d-flex .view,
  .d-flex .btn-seperator {
    border: none;
    background-color: transparent;
    padding: 5px;
  }

  .item-count{
    display: inline-block;
    padding-left: 6px;
  }

  .pagination-container {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 20px; /* Add some space above the pagination */
}

.pagination-container .page-item {
    margin: 0 5px; /* Add horizontal margin between page buttons */
}

.pagination-container .page-link {
    padding: 8px 12px; /* Adjust padding inside the buttons */
    border-radius: 5px; /* Optional: Add border-radius for rounded corners */
    border: 1px solid #ddd; /* Optional: Border around each button */
    text-decoration: none; /* Remove underline */
    color: #333; /* Button text color */
}

.pagination-container .page-item.active .page-link {
    background-color: #007bff; /* Active button background color */
    color: #fff; /* Active button text color */
    border-color: #007bff; /* Active button border color */
}

.pagination-container .page-link:hover {
    background-color: #f8f9fa; /* Background color on hover */
    color: #007bff; /* Text color on hover */
}

</style>

<!-- Start Navbar Area -->
<%- include('user-partials/navbar.ejs') %>
<!-- End Navbar Area -->

<!-- ...:::: Start Breadcrumb Section:::... -->
<div class="breadcrumb-section breadcrumb-bg-color--golden">
  <div class="breadcrumb-wrapper">
    <div class="container">
      <div class="row">
        <div class="col-12">
          <h3 class="breadcrumb-title">My Account</h3>
          <div class="breadcrumb-nav breadcrumb-nav-color--black breadcrumb-nav-hover-color--golden">
            <nav aria-label="breadcrumb">
              <ul>
                <li><a href="/home">Home</a></li>
                <li class="active" aria-current="page">My Account</li>
              </ul>
            </nav>
          </div>
        </div>
      </div>
    </div>
  </div>
</div> <!-- ...:::: End Breadcrumb Section:::... -->

<!-- ...:::: Start Account Dashboard Section:::... -->
<div class="account-dashboard">
  <div class="container">
    <div class="row">
      <div class="col-sm-12 col-md-3 col-lg-3">
        <!-- Nav tabs -->
        <div class="dashboard_tab_button" data-aos="fade-up" data-aos-delay="0">
          <ul role="tablist" class="nav flex-column dashboard-list">
            <li>
              <a href="?tab=dashboard" data-bs-toggle="tab" class="nav-link btn btn-block btn-md btn-black-default-hover active">Dashboard</a>
            </li>
            <li>
              <a href="?tab=orders" data-bs-toggle="tab" class="nav-link btn btn-block btn-md btn-black-default-hover">Orders</a>
            </li>
            <li>
              <a href="?tab=address" data-bs-toggle="tab" class="nav-link btn btn-block btn-md btn-black-default-hover">Addresses</a>
            </li>
            <li>
              <a href="?tab=wallet" data-bs-toggle="tab" class="nav-link btn btn-block btn-md btn-black-default-hover">Wallet</a>
            </li>


            <li>
              <a href="/logout" class="btn btn-block btn-md btn-black-default-hover">logout</a>
            </li>
          </ul>
        </div>
      </div>
      <div class="col-sm-12 col-md-9 col-lg-9">
        <!-- Tab panes -->
        <div class="tab-content dashboard_content" data-aos="fade-up" data-aos-delay="200">
          <div class="tab-pane fade show active" id="dashboard">
            <div class="dashboard-container">
              <div class="dashboard-header">
                <h1>User Dashboard</h1>
              </div>
              <% if (userInfo) { %>
              <div class="user-info">
                <div class="d-flex">
                  <span>Full Name:</span>
                  <p id="fullName">
                    <%= userInfo.fullname %>
                  </p>
                </div>
                <div class="d-flex">
                  <span>Email:</span>
                  <p id="email">
                    <%= userInfo.email %>
                  </p>
                </div>
				<div class="d-flex">
					<span>Referral Code:</span>
					<p>
					  <%= userInfo.referralCode %>
					</p>
				  </div>
                <div class="d-flex">
                  <span>Mobile:</span>
                  <% if(userInfo.phone==null) { %>
                  <p id="mobile">N/A</p>
                  <% } else { %>
                  <p id="mobile">
                    <%= userInfo.phone %>
                  </p>
                  <% } %>
                </div>
                <div class="d-flex">
                  <a href="/edit-profile" class="view">
                    <i class="fas fa-edit"></i> Edit
                  </a>
                </div>
                <div class="d-flex">
                  <a href="/change-password" class="view">
                    <i class="fas fa-edit"></i> Change Password
                  </a>
                </div>
              </div>
              <% } else { %>
              <div class="no-userinfo">
                <p>User information is not available.</p>
              </div>
              <% } %>
            </div>
          </div>

          <div class="tab-pane fade" id="orders">
			<h4>Orders</h4>
			<div class="table_page table-responsive">
			  <table>
				<thead>
				  <tr>
					<th>Date</th>
					<th>Order</th>
					<th>Order Status</th>
					<th>Payment Status</th>
					<th>Total</th>
					<th>Actions</th>
				  </tr>
				</thead>
				<tbody>
				  <!-- Orders will be dynamically loaded here -->
				</tbody>
			  </table>
			  <ul class="pagination-container pagination text-center"></ul>
			  <br>
			</div>
		  </div>

          <div class="tab-pane" id="address">
            <div class="address-container">
              <div class="d-flex justify-content-between">
                <h2>My Addresses</h2>
                <a class="btn btn-md btn-black-default-hover" href="/add-address?source=profile">Add
                  Address</a>
              </div>


              <% if (addresses && addresses.length> 0) { %>
              <ul class="address-list">
                <% addresses.forEach(address=> { %>
                <li class="address-item">
                  <h5 class="address-title">
                    <%= address.addressType %> Address
                  </h5>
                  <address>
                    <strong>House No:</strong>
                    <%= address.houseNo %>,
                    <strong>Street:</strong>
                    <%= address.street %>,
                    <strong>Landmark:</strong>
                    <%= address.landmark || 'N/A' %>,
                    <strong>City:</strong>
                    <%= address.city %>,
                    <strong>District:</strong>
                    <%= address.district %>,
                    <strong>State:</strong>
                    <%= address.state %>,
                    <strong>Pincode:</strong>
                    <%= address.pincode %>,
                    <strong>Country:</strong>
                    <%= address.country %>
                  </address>
                  <div class="d-flex">
                    <a href="/edit-address/<%= address._id %>?source=profile" class="view">
                      <i class="fas fa-edit"></i> Edit
                    </a>
                    <p class="btn-seperator">|</p>
                    <button class="delete-address-button text-red view" data-user-id="<%= userId %>" data-address-id="<%= address._id %>">
                      <i class="fas fa-trash"></i> Delete
                    </button>
                  </div>

                </li>
                <% }) %>
              </ul>
              <% } else { %>
              <p>No addresses available. Please add a new address.</p>
              <% } %>
            </div>
          </div>

          <div class="tab-pane fade" id="wallet">
			<div class="wallet-container">
			  <div class="wallet-header">
				<h2>My Wallet</h2>
			  </div>
			  <div class="table_page table-responsive">
				<table>
				  <thead>
					<tr>
					  <th>S.No</th>
					  <th>Date</th>
					  <th>Amount</th>
					  <th>Type</th>
					  <th>Reason</th>
					</tr>
				  </thead>
				  <tbody>
					<!-- Transactions will be dynamically loaded here -->
				  </tbody>
				</table>
				<ul class="pagination-container pagination text-center"></ul>
				<br>
			  </div>
			</div>
		  </div>

        </div>
      </div>
    </div>
  </div>
</div> <!-- ...:::: End Account Dashboard Section:::... -->

<!-- Start Footer Section -->
<%- include('user-partials/footer.ejs') %>
<!-- End Footer Section -->


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  // Function to get query parameter value
  function getQueryParam(param) {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get(param);
  }

  // Function to set active tab
  function setActiveTab(tabId) {
    const tabExists = document.querySelector(`.dashboard-list .nav-link[href$="tab=${tabId}"]`);
    if (!tabExists) {
      tabId = 'dashboard';
    }

    document.querySelectorAll('.dashboard-list .nav-link').forEach(link => {
      if (link.getAttribute('href').includes(tabId)) {
        link.classList.add('active');
      } else {
        link.classList.remove('active');
      }
    });
    document.querySelectorAll('.tab-pane').forEach(pane => {
      if (pane.getAttribute('id') === tabId) {
        pane.classList.add('show', 'active');
      } else {
        pane.classList.remove('show', 'active');
      }
    });

    if (getQueryParam('tab') !== tabId) {
      history.pushState(null, '', `/profile?tab=${tabId}`);
    }
    if (tabId === 'orders') {
      fetchFilteredOrders(1);
    } else if (tabId === 'wallet') {
      fetchFilteredTransactions(1);
    }
  }

  let activeTab = getQueryParam('tab') || 'dashboard';
  setActiveTab(activeTab);

  document.querySelectorAll('.dashboard-list .nav-link').forEach(link => {
    link.addEventListener('click', function(e) {
      e.preventDefault();
      const tabId = this.getAttribute('href').split('=')[1];
      setActiveTab(tabId);
    });
  });

  window.addEventListener('popstate', function() {
    const newActiveTab = getQueryParam('tab') || 'dashboard';
    setActiveTab(newActiveTab);
  });

   // Function to fetch and render filtered orders
   async function fetchFilteredOrders(page = 1) {
    try {
      const response = await fetch(`/api/filter/orders?page=${page}`);
      const data = await response.json();

      if (data.success) {
        renderOrders(data.orders,data.currentPage);
        updatePaginationUI(data.currentPage, data.totalPages, 'orders');
      } else {
        alert('Failed to fetch orders.');
      }
    } catch (error) {
      console.error('Error fetching filtered orders:', error);
    }
  }

  // Function to fetch and render filtered transactions
  async function fetchFilteredTransactions(page = 1) {
    try {
      const response = await fetch(`/api/filter/transactions?page=${page}`);
      const data = await response.json();

      if (data.success) {
        renderTransactions(data.transactions,data.currentPage);
        updatePaginationUI(data.currentPage, data.totalPages, 'wallet');
      } else {
        alert('Failed to fetch transactions.');
      }
    } catch (error) {
      console.error('Error fetching filtered transactions:', error);
    }
  }

  // Function to render orders (implement your rendering logic)
  function renderOrders(orders,currentPage) {
    const ordersTableBody = document.querySelector('#orders tbody');
    ordersTableBody.innerHTML = ''; // Clear the table body

    if (orders.length === 0) {
      ordersTableBody.innerHTML = '<tr><td colspan="6">No orders found.</td></tr>';
      return;
    }

	const itemsPerPage = 10;
	const startingIndex = (currentPage - 1) * itemsPerPage;

    orders.forEach((order, index) => {
      const orderRow = `
        <tr>
          <td>${startingIndex + index + 1}</td>
          <td>${new Date(order.createdAt).toLocaleDateString('en-US', { day: '2-digit', month: '2-digit', year: 'numeric' })}</td>
          <td><span class="${order.status === 'Delivered' ? 'text-success' : (order.status === 'Cancelled' || order.status === 'Returned' ? 'text-danger' : 'text-warning')}">${order.status}</span></td>
          <td><span class="${order.paymentStatus === 'Success' ? 'text-success' : (order.paymentStatus === 'Failed' ? 'text-danger' : 'text-warning')}">${order.paymentStatus}</span></td>
          <td>${order.billTotal}</td>
          <td><a href="/order-details/${order._id}" class="view">view</a></td>
        </tr>
      `;
      ordersTableBody.insertAdjacentHTML('beforeend', orderRow);
    });
  }

  // Function to render transactions (implement your rendering logic)
  function renderTransactions(transactions,currentPage) {
    const transactionsTableBody = document.querySelector('#wallet tbody');
    transactionsTableBody.innerHTML = ''; // Clear the table body

    if (transactions.length === 0) {
      transactionsTableBody.innerHTML = '<tr><td colspan="5">No transactions found.</td></tr>';
      return;
    }

    transactions.forEach((transaction, index) => {
      const transactionRow = `
        <tr>
          <td>${index + 1}</td>
          <td>${new Date(transaction.createdAt).toLocaleDateString('en-US', { day: '2-digit', month: '2-digit', year: 'numeric' })}</td>
          <td>${transaction.amount}</td>
          <td><span style="color: ${transaction.type === 'credit' ? 'green' : 'red'};">${transaction.type}</span></td>
          <td>${transaction.reason || 'N/A'}</td>
        </tr>
      `;
      transactionsTableBody.insertAdjacentHTML('beforeend', transactionRow);
    });
  }

  // Function to update pagination UI (implement your pagination logic)
  function updatePaginationUI(currentPage, totalPages, tabId) {
    const paginationContainer = document.querySelector(`#${tabId} .pagination-container`);
    paginationContainer.innerHTML = '';

    // Add Previous Page button if not on the first page
    if (currentPage > 1) {
        const prevPageItem = document.createElement('li');
        prevPageItem.classList.add('page-item');
        prevPageItem.innerHTML = `
            <a class="page-link" data-page="${currentPage - 1}" href="#"><i class="ion-ios-skipbackward"></i></a>
        `;
        paginationContainer.appendChild(prevPageItem);
    }

    // Add page numbers
    for (let i = Math.max(1, currentPage - 2); i <= Math.min(currentPage + 2, totalPages); i++) {
        const pageItem = document.createElement('li');
        pageItem.classList.add('page-item');
        if (currentPage === i) {
            pageItem.classList.add('active');
        }
        pageItem.innerHTML = `
            <a class="page-link" data-page="${i}" href="#">${i}</a>
        `;
        paginationContainer.appendChild(pageItem);
    }

    // Add Next Page button if not on the last page
    if (currentPage < totalPages) {
        const nextPageItem = document.createElement('li');
        nextPageItem.classList.add('page-item');
        nextPageItem.innerHTML = `
            <a class="page-link" data-page="${currentPage + 1}" href="#"><i class="ion-ios-skipforward"></i></a>
        `;
        paginationContainer.appendChild(nextPageItem);
    }

    // Attach event listeners to pagination links
    const pageLinks = paginationContainer.querySelectorAll('.page-link');
    pageLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const newPage = parseInt(this.dataset.page);

            if (tabId === 'orders') {
                fetchFilteredOrders(newPage);
            } else if (tabId === 'wallet') {
                fetchFilteredTransactions(newPage);
            }
        });
    });
}


  document.querySelectorAll('.delete-address-button').forEach(button => {
    button.addEventListener('click', async function() {
      const userId = this.dataset.userId;
      const addressId = this.dataset.addressId;

      const result = await Swal.fire({
        title: 'Are you sure?',
        text: 'Do you really want to delete this address?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'No, keep it'
      });

      if (result.isConfirmed) {
        try {
          const response = await fetch(`/delete-address/${addressId}`, {
            method: 'DELETE'
          });

          const result = await response.json();
          if (response.ok) {
            await Swal.fire('Deleted!', result.message, 'success');
            this.closest('.address-item').remove();
          } else {
            Swal.fire('Failed!', 'Failed to delete address: ' + result.message, 'error');
          }
        } catch (error) {
          Swal.fire('Error!', 'An error occurred while deleting the address.', 'error');
        }
      }
    });
  });
</script>

<%- include('user-partials/scripts.ejs') %>